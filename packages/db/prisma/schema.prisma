generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auth {
  id       String @id @default(cuid())
  name     String
  email    String @unique
  password String
  user     User?
}

model User {
  id String @id @default(cuid())

  auth   Auth   @relation(fields: [authId], references: [id], onDelete: Cascade)
  authId String @unique

  zaps Zap[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Zap {
  id    String @id @default(cuid())
  title String

  trigger   Trigger?
  triggerId String

  actions Action[]

  zapRuns ZapRun[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ZapRun {
  id String @id @default(cuid())
  metadata     Json
  zapId String @unique
  zap   Zap    @relation(fields: [zapId], references: [id], onDelete: Cascade)
}

model AvailableTriggers {
  id       String    @id @default(cuid())
  name     String
  Triggers Trigger[]
}

model Trigger {
  id String @id @default(cuid())

  triggerId String
  type      AvailableTriggers @relation(fields: [triggerId], references: [id])

  zapId String @unique
  zap   Zap    @relation(fields: [zapId], references: [id], onDelete: Cascade)
}

model AvailableActions {
  id      String   @id @default(cuid())
  name    String
  Actions Action[]
}

model Action {
  id String @id @default(cuid())

  type     AvailableActions @relation(fields: [actionId], references: [id])
  actionId String

  zapId String
  zap   Zap    @relation(fields: [zapId], references: [id], onDelete: Cascade)
}
